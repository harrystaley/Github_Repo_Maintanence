
import os
import json
import re
import openai
from github import Github
from dotenv import load_dotenv

# --- Load Environment Variables ---
load_dotenv()

# --- GitHub and OpenAI Auth ---
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not GITHUB_TOKEN:
    raise ValueError("GITHUB_TOKEN not set in environment variables.")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY not set in environment variables.")

# --- Topic Rules ---
TOPIC_RULES_PATH = "topic_rules.json"
try:
    with open(TOPIC_RULES_PATH, "r") as f:
        TOPIC_RULES = json.load(f)
except FileNotFoundError:
    print(f"\n‚ùå ERROR: Could not find topic rules file at {TOPIC_RULES_PATH}")
    exit(1)

# --- GitHub and OpenAI Clients ---
g = Github(GITHUB_TOKEN)
user = g.get_user()
openai.api_key = OPENAI_API_KEY

print(f"\nüîç Logged in as: {user.login}")

def generate_readme(repo_name, description, topics):
    """
    Generates a professional README.md file content using OpenAI's Chat API.

    Parameters:
        repo_name (str): The name of the GitHub repository.
        description (str): A brief description of the repository.
        topics (list): A list of relevant topics or tags for the repository.

    Returns:
        str: The generated README content in Markdown format.
    """
    prompt = f"""You are a helpful assistant who writes high-quality GitHub README.md files.

Repo Name: {repo_name}
Description: {description}
Topics: {', '.join(topics)}

Generate a professional README.md that includes:
1. A brief project overview.
2. Setup or installation instructions if applicable including dependencies.
3. Usage examples.
4. Contribution guidelines.
5. License section.
""".strip()

    response = openai.ChatCompletion.create(
        model="gpt-40",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.5,
        max_tokens=800
    )
    return response.choices[0].message.content.strip()

# --- Main Loop ---
for repo in user.get_repos():
    if repo.archived or repo.fork or repo.private:
        print(f"üö´ Skipping '{repo.name}' (archived, forked, or private)")
        continue

    name = repo.name.lower()
    desc = (repo.description or "").lower()
    matched_topics = set()

    for keyword, topics in TOPIC_RULES.items():
        if re.search(rf"\b{re.escape(keyword)}\b", name, re.IGNORECASE) or re.search(rf"\b{re.escape(keyword)}\b", desc, re.IGNORECASE):
            matched_topics.update(topics)

    if matched_topics:
        try:
            print(f"üè∑Ô∏è Tagging '{repo.name}' with: {matched_topics}")
            repo.replace_topics(list(matched_topics))
        except Exception as e:
            print(f"‚ö†Ô∏è Error tagging '{repo.name}': {e}")
    else:
        print(f"‚ùå Skipped '{repo.name}': No topic rules matched.")

    try:
        repo.get_readme()
        print(f"‚úÖ README exists for '{repo.name}'")
    except:
        try:
            print(f"üìÑ Creating README.md for '{repo.name}'...")
            readme_content = generate_readme(repo.name, repo.description or "", list(matched_topics))
            repo.create_file("README.md", "Add autogenerated README", readme_content)
            print(f"‚úÖ README.md created for '{repo.name}'")
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to create README.md for '{repo.name}': {e}")
